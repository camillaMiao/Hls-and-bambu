// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "myproject.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic myproject::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic myproject::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> myproject::ap_ST_fsm_pp0_stage0 = "1";
const bool myproject::ap_const_boolean_1 = true;
const sc_lv<32> myproject::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool myproject::ap_const_boolean_0 = false;

myproject::myproject(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_26 = new dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0("grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_26");
    grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_26->ap_clk(ap_clk);
    grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_26->ap_rst(ap_rst);
    grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_26->data_V_read(dense_input_V);
    grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_26->ap_return_0(grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_26_ap_return_0);
    grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_26->ap_return_1(grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_26_ap_return_1);
    grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_26->ap_return_2(grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_26_ap_return_2);
    grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_26->ap_return_3(grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_26_ap_return_3);
    grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_26->ap_ce(grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_26_ap_ce);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( ap_start );
    sensitive << ( dense_input_V_ap_vld );

    SC_METHOD(thread_ap_block_pp0_stage0_11001_ignoreCallOp9);
    sensitive << ( ap_start );
    sensitive << ( dense_input_V_ap_vld );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( ap_start );
    sensitive << ( dense_input_V_ap_vld );

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);
    sensitive << ( ap_start );
    sensitive << ( dense_input_V_ap_vld );

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0_ignore_call4);
    sensitive << ( ap_start );
    sensitive << ( dense_input_V_ap_vld );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter1_ignore_call4);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter2);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter2_ignore_call4);

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter3);

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter3_ignore_call4);

    SC_METHOD(thread_ap_block_state5_pp0_stage0_iter4);

    SC_METHOD(thread_ap_block_state5_pp0_stage0_iter4_ignore_call4);

    SC_METHOD(thread_ap_block_state6_pp0_stage0_iter5);

    SC_METHOD(thread_ap_block_state6_pp0_stage0_iter5_ignore_call4);

    SC_METHOD(thread_ap_block_state7_pp0_stage0_iter6);

    SC_METHOD(thread_ap_block_state7_pp0_stage0_iter6_ignore_call4);

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter6 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_reg_pp0_iter0);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( ap_enable_reg_pp0_iter6 );

    SC_METHOD(thread_ap_idle_pp0_0to5);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( ap_enable_reg_pp0_iter5 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_reset_idle_pp0);
    sensitive << ( ap_start );
    sensitive << ( ap_idle_pp0_0to5 );

    SC_METHOD(thread_ap_return_0);
    sensitive << ( ap_enable_reg_pp0_iter6 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_26_ap_return_0 );

    SC_METHOD(thread_ap_return_1);
    sensitive << ( ap_enable_reg_pp0_iter6 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_26_ap_return_1 );

    SC_METHOD(thread_ap_return_2);
    sensitive << ( ap_enable_reg_pp0_iter6 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_26_ap_return_2 );

    SC_METHOD(thread_ap_return_3);
    sensitive << ( ap_enable_reg_pp0_iter6 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_26_ap_return_3 );

    SC_METHOD(thread_dense_input_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( dense_input_V_ap_vld );

    SC_METHOD(thread_grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_26_ap_ce);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001_ignoreCallOp9 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_reset_idle_pp0 );

    ap_CS_fsm = "1";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter3 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter4 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter5 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter6 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "myproject_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, dense_input_V_ap_vld, "(port)dense_input_V_ap_vld");
    sc_trace(mVcdFile, dense_input_V, "(port)dense_input_V");
    sc_trace(mVcdFile, ap_return_0, "(port)ap_return_0");
    sc_trace(mVcdFile, ap_return_1, "(port)ap_return_1");
    sc_trace(mVcdFile, ap_return_2, "(port)ap_return_2");
    sc_trace(mVcdFile, ap_return_3, "(port)ap_return_3");
    sc_trace(mVcdFile, dense_input_V_blk_n, "(port)dense_input_V_blk_n");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter3, "ap_enable_reg_pp0_iter3");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter4, "ap_enable_reg_pp0_iter4");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter5, "ap_enable_reg_pp0_iter5");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter6, "ap_enable_reg_pp0_iter6");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter1, "ap_block_state2_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter2, "ap_block_state3_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter3, "ap_block_state4_pp0_stage0_iter3");
    sc_trace(mVcdFile, ap_block_state5_pp0_stage0_iter4, "ap_block_state5_pp0_stage0_iter4");
    sc_trace(mVcdFile, ap_block_state6_pp0_stage0_iter5, "ap_block_state6_pp0_stage0_iter5");
    sc_trace(mVcdFile, ap_block_state7_pp0_stage0_iter6, "ap_block_state7_pp0_stage0_iter6");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_26_ap_return_0, "grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_26_ap_return_0");
    sc_trace(mVcdFile, grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_26_ap_return_1, "grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_26_ap_return_1");
    sc_trace(mVcdFile, grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_26_ap_return_2, "grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_26_ap_return_2");
    sc_trace(mVcdFile, grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_26_ap_return_3, "grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_26_ap_return_3");
    sc_trace(mVcdFile, grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_26_ap_ce, "grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_26_ap_ce");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0_ignore_call4, "ap_block_state1_pp0_stage0_iter0_ignore_call4");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter1_ignore_call4, "ap_block_state2_pp0_stage0_iter1_ignore_call4");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter2_ignore_call4, "ap_block_state3_pp0_stage0_iter2_ignore_call4");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter3_ignore_call4, "ap_block_state4_pp0_stage0_iter3_ignore_call4");
    sc_trace(mVcdFile, ap_block_state5_pp0_stage0_iter4_ignore_call4, "ap_block_state5_pp0_stage0_iter4_ignore_call4");
    sc_trace(mVcdFile, ap_block_state6_pp0_stage0_iter5_ignore_call4, "ap_block_state6_pp0_stage0_iter5_ignore_call4");
    sc_trace(mVcdFile, ap_block_state7_pp0_stage0_iter6_ignore_call4, "ap_block_state7_pp0_stage0_iter6_ignore_call4");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001_ignoreCallOp9, "ap_block_pp0_stage0_11001_ignoreCallOp9");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0_0to5, "ap_idle_pp0_0to5");
    sc_trace(mVcdFile, ap_reset_idle_pp0, "ap_reset_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

myproject::~myproject() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_26;
}

void myproject::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_pp0_stage0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0))) {
            ap_enable_reg_pp0_iter1 = ap_start.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter3 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter3 = ap_enable_reg_pp0_iter2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter4 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter4 = ap_enable_reg_pp0_iter3.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter5 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter5 = ap_enable_reg_pp0_iter4.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter6 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter6 = ap_enable_reg_pp0_iter5.read();
        }
    }
}

void myproject::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[0];
}

void myproject::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void myproject::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || 
  esl_seteq<1,1,1>(ap_const_logic_0, dense_input_V_ap_vld.read())));
}

void myproject::thread_ap_block_pp0_stage0_11001_ignoreCallOp9() {
    ap_block_pp0_stage0_11001_ignoreCallOp9 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || 
  esl_seteq<1,1,1>(ap_const_logic_0, dense_input_V_ap_vld.read())));
}

void myproject::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || 
  esl_seteq<1,1,1>(ap_const_logic_0, dense_input_V_ap_vld.read())));
}

void myproject::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dense_input_V_ap_vld.read()));
}

void myproject::thread_ap_block_state1_pp0_stage0_iter0_ignore_call4() {
    ap_block_state1_pp0_stage0_iter0_ignore_call4 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dense_input_V_ap_vld.read()));
}

void myproject::thread_ap_block_state2_pp0_stage0_iter1() {
    ap_block_state2_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void myproject::thread_ap_block_state2_pp0_stage0_iter1_ignore_call4() {
    ap_block_state2_pp0_stage0_iter1_ignore_call4 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void myproject::thread_ap_block_state3_pp0_stage0_iter2() {
    ap_block_state3_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void myproject::thread_ap_block_state3_pp0_stage0_iter2_ignore_call4() {
    ap_block_state3_pp0_stage0_iter2_ignore_call4 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void myproject::thread_ap_block_state4_pp0_stage0_iter3() {
    ap_block_state4_pp0_stage0_iter3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void myproject::thread_ap_block_state4_pp0_stage0_iter3_ignore_call4() {
    ap_block_state4_pp0_stage0_iter3_ignore_call4 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void myproject::thread_ap_block_state5_pp0_stage0_iter4() {
    ap_block_state5_pp0_stage0_iter4 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void myproject::thread_ap_block_state5_pp0_stage0_iter4_ignore_call4() {
    ap_block_state5_pp0_stage0_iter4_ignore_call4 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void myproject::thread_ap_block_state6_pp0_stage0_iter5() {
    ap_block_state6_pp0_stage0_iter5 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void myproject::thread_ap_block_state6_pp0_stage0_iter5_ignore_call4() {
    ap_block_state6_pp0_stage0_iter5_ignore_call4 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void myproject::thread_ap_block_state7_pp0_stage0_iter6() {
    ap_block_state7_pp0_stage0_iter6 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void myproject::thread_ap_block_state7_pp0_stage0_iter6_ignore_call4() {
    ap_block_state7_pp0_stage0_iter6_ignore_call4 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void myproject::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter6.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void myproject::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void myproject::thread_ap_enable_reg_pp0_iter0() {
    ap_enable_reg_pp0_iter0 = ap_start.read();
}

void myproject::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void myproject::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter4.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter5.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter6.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void myproject::thread_ap_idle_pp0_0to5() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter4.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter5.read()))) {
        ap_idle_pp0_0to5 = ap_const_logic_1;
    } else {
        ap_idle_pp0_0to5 = ap_const_logic_0;
    }
}

void myproject::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void myproject::thread_ap_reset_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0_0to5.read()))) {
        ap_reset_idle_pp0 = ap_const_logic_1;
    } else {
        ap_reset_idle_pp0 = ap_const_logic_0;
    }
}

void myproject::thread_ap_return_0() {
    ap_return_0 = grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_26_ap_return_0.read();
}

void myproject::thread_ap_return_1() {
    ap_return_1 = grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_26_ap_return_1.read();
}

void myproject::thread_ap_return_2() {
    ap_return_2 = grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_26_ap_return_2.read();
}

void myproject::thread_ap_return_3() {
    ap_return_3 = grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_26_ap_return_3.read();
}

void myproject::thread_dense_input_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        dense_input_V_blk_n = dense_input_V_ap_vld.read();
    } else {
        dense_input_V_blk_n = ap_const_logic_1;
    }
}

void myproject::thread_grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_26_ap_ce() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001_ignoreCallOp9.read(), ap_const_boolean_0))) {
        grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_26_ap_ce = ap_const_logic_1;
    } else {
        grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_26_ap_ce = ap_const_logic_0;
    }
}

void myproject::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}

}

