-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_axi is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    in_r_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    in_r_TVALID : IN STD_LOGIC;
    in_r_TREADY : OUT STD_LOGIC;
    in_r_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    out_r_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_r_TVALID : OUT STD_LOGIC;
    out_r_TREADY : IN STD_LOGIC;
    out_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of myproject_axi is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "myproject_axi,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.367000,HLS_SYN_LAT=45,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=50,HLS_SYN_FF=8854,HLS_SYN_LUT=8013,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv12_A : STD_LOGIC_VECTOR (11 downto 0) := "000000001010";
    constant ap_const_lv12_FF6 : STD_LOGIC_VECTOR (11 downto 0) := "111111110110";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_F : STD_LOGIC_VECTOR (7 downto 0) := "00001111";
    constant ap_const_lv9_FF : STD_LOGIC_VECTOR (8 downto 0) := "011111111";
    constant ap_const_lv256_lc_1 : STD_LOGIC_VECTOR (255 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv5_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_const_lv32_FFFFFFE8 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111101000";
    constant ap_const_lv32_FFFFFFE7 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111100111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv16_FFE8 : STD_LOGIC_VECTOR (15 downto 0) := "1111111111101000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_7E : STD_LOGIC_VECTOR (7 downto 0) := "01111110";
    constant ap_const_lv8_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";

    signal ap_rst_n_inv : STD_LOGIC;
    signal in_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln19_fu_238_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_r_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp1_iter8 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal icmp_ln27_reg_1211 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_1211_pp1_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp1_iter9 : STD_LOGIC := '0';
    signal icmp_ln27_reg_1211_pp1_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal is_last_0_reg_196 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_reg_208 : STD_LOGIC_VECTOR (4 downto 0);
    signal i2_0_reg_219 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln19_reg_1030 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln19_reg_1030_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_1030_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_1030_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_1030_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_1030_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_1030_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_1030_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_244_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal in_data_tmp_reg_1039 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_data_tmp_reg_1039_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in_data_tmp_reg_1039_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal in_data_tmp_reg_1039_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln203_fu_259_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln203_reg_1045 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln203_reg_1045_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln203_reg_1045_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln203_reg_1045_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln203_reg_1045_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln203_reg_1045_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal is_last_fu_263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal is_last_reg_1050 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln556_fu_273_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln556_reg_1055 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_8_reg_1060 : STD_LOGIC_VECTOR (0 downto 0);
    signal exp_tmp_V_reg_1065 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln565_fu_295_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln565_reg_1070 : STD_LOGIC_VECTOR (51 downto 0);
    signal man_V_2_fu_319_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_2_reg_1075 : STD_LOGIC_VECTOR (53 downto 0);
    signal icmp_ln571_fu_326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln571_reg_1080 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln571_reg_1080_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln581_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln581_reg_1086 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_fu_355_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_reg_1092 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln582_fu_363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln582_reg_1098 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln582_reg_1098_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln583_fu_369_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln583_reg_1104 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln583_reg_1104_pp0_iter4_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln583_reg_1104_pp0_iter5_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_reg_1110 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln581_fu_383_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln581_reg_1115 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln581_reg_1115_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln585_fu_445_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln585_reg_1125 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln603_fu_468_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln603_reg_1130 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln603_reg_1130_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_fu_474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_reg_1135 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_reg_1135_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_1_fu_480_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln603_1_reg_1141 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln603_1_reg_1141_pp0_iter5_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_400_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln586_reg_1146 : STD_LOGIC_VECTOR (53 downto 0);
    signal or_ln603_2_fu_502_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_2_reg_1151 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_2_reg_1151_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_2_fu_525_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln603_2_reg_1156 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln_fu_531_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_reg_1161 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_32_fu_538_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_32_reg_1166 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln203_fu_544_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln203_reg_1171 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln203_reg_1171_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln203_fu_611_p2 : STD_LOGIC_VECTOR (255 downto 0);
    signal shl_ln203_reg_1179 : STD_LOGIC_VECTOR (255 downto 0);
    signal and_ln203_fu_629_p2 : STD_LOGIC_VECTOR (255 downto 0);
    signal and_ln203_reg_1185 : STD_LOGIC_VECTOR (255 downto 0);
    signal out_local_0_V_reg_1191 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal out_local_1_V_reg_1196 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_local_2_V_reg_1201 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_local_3_V_reg_1206 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln27_fu_696_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state18_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state19_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state20_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state21_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_state22_pp1_stage0_iter4 : BOOLEAN;
    signal ap_block_state23_pp1_stage0_iter5 : BOOLEAN;
    signal ap_block_state24_pp1_stage0_iter6 : BOOLEAN;
    signal ap_block_state25_pp1_stage0_iter7 : BOOLEAN;
    signal ap_block_state26_pp1_stage0_iter8 : BOOLEAN;
    signal ap_block_state26_io : BOOLEAN;
    signal ap_block_state27_pp1_stage0_iter9 : BOOLEAN;
    signal ap_block_state27_io : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln27_reg_1211_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_1211_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_1211_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_1211_pp1_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_1211_pp1_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_1211_pp1_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_702_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal tmp_V_3_fu_712_p6 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_3_reg_1220 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_10_reg_1226 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_10_reg_1226_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_10_reg_1226_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_10_reg_1226_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_10_reg_1226_pp1_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_10_reg_1226_pp1_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_10_reg_1226_pp1_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_10_reg_1226_pp1_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_fu_730_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_reg_1232 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln30_fu_742_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln30_reg_1237 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln30_reg_1237_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln30_reg_1237_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln30_reg_1237_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln30_reg_1237_pp1_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln30_reg_1237_pp1_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln30_reg_1237_pp1_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln30_reg_1237_pp1_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_fu_748_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_reg_1242 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_reg_1242_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_reg_1242_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_reg_1242_pp1_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_reg_1242_pp1_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_reg_1242_pp1_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_reg_1242_pp1_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_4_fu_753_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_4_reg_1247 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_4_reg_1247_pp1_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_4_reg_1247_pp1_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal l_fu_776_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_reg_1255 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln943_fu_784_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln943_reg_1260 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln943_reg_1260_pp1_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln943_reg_1260_pp1_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln943_reg_1260_pp1_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln943_reg_1260_pp1_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln943_reg_1260_pp1_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln943_reg_1260_pp1_iter7_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln944_fu_788_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln944_reg_1265 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln944_fu_793_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln944_reg_1272 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln944_reg_1272_pp1_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln947_fu_801_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln947_reg_1277 : STD_LOGIC_VECTOR (4 downto 0);
    signal lsb_index_fu_807_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_reg_1282 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_1288 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln947_1_fu_836_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln947_1_reg_1293 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln958_fu_842_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln958_reg_1298 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln958_fu_847_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln958_reg_1303 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_fu_899_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_reg_1308 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_reg_1308_pp1_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln958_fu_913_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln958_reg_1323 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln958_reg_1323_pp1_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_918_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln958_reg_1333 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_926_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln958_reg_1338 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_5_reg_1343 : STD_LOGIC_VECTOR (62 downto 0);
    signal m_5_reg_1343_pp1_iter7_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_10_reg_1348 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln964_fu_968_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln964_reg_1353 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state18 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter7 : STD_LOGIC := '0';
    signal grp_myproject_fu_230_ap_start : STD_LOGIC;
    signal grp_myproject_fu_230_ap_done : STD_LOGIC;
    signal grp_myproject_fu_230_ap_idle : STD_LOGIC;
    signal grp_myproject_fu_230_ap_ready : STD_LOGIC;
    signal grp_myproject_fu_230_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_myproject_fu_230_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_myproject_fu_230_ap_return_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_myproject_fu_230_ap_return_3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_myproject_fu_230_dense_input_V_blk_n : STD_LOGIC;
    signal ap_phi_mux_is_last_0_phi_fu_200_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_myproject_fu_230_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_NS_fsm_state11 : STD_LOGIC;
    signal in_local_V_fu_174 : STD_LOGIC_VECTOR (255 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal in_local_V_1_fu_669_p2 : STD_LOGIC_VECTOR (255 downto 0);
    signal ap_block_pp1_stage0_01001 : BOOLEAN;
    signal grp_fu_235_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ireg_V_fu_269_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_302_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_Result_9_fu_309_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_1_fu_313_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln461_fu_299_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_fu_331_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln581_fu_343_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln581_fu_349_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_400_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal bitcast_ln696_fu_405_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_408_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln582_fu_424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln582_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln585_fu_386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln581_fu_434_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln585_fu_439_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln581_fu_457_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln603_fu_391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln581_fu_462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln585_1_fu_451_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln588_fu_416_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln571_fu_487_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln582_fu_492_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_1_fu_497_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln581cast_fu_510_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln604_fu_513_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln586_fu_507_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln603_fu_518_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln603_3_fu_550_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln203_fu_556_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln203_1_fu_559_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal xor_ln203_fu_566_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln203_fu_572_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln203_2_fu_586_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln203_1_fu_579_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal xor_ln203_1_fu_593_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln203_2_fu_562_p1 : STD_LOGIC_VECTOR (255 downto 0);
    signal zext_ln203_3_fu_599_p1 : STD_LOGIC_VECTOR (255 downto 0);
    signal zext_ln203_4_fu_603_p1 : STD_LOGIC_VECTOR (255 downto 0);
    signal zext_ln203_5_fu_607_p1 : STD_LOGIC_VECTOR (255 downto 0);
    signal shl_ln203_1_fu_617_p2 : STD_LOGIC_VECTOR (255 downto 0);
    signal lshr_ln203_fu_623_p2 : STD_LOGIC_VECTOR (255 downto 0);
    signal tmp_6_fu_638_p4 : STD_LOGIC_VECTOR (255 downto 0);
    signal xor_ln203_2_fu_653_p2 : STD_LOGIC_VECTOR (255 downto 0);
    signal select_ln203_3_fu_647_p3 : STD_LOGIC_VECTOR (255 downto 0);
    signal and_ln203_1_fu_658_p2 : STD_LOGIC_VECTOR (255 downto 0);
    signal and_ln203_2_fu_664_p2 : STD_LOGIC_VECTOR (255 downto 0);
    signal tmp_V_3_fu_712_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln30_fu_736_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_fu_758_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_11_fu_768_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln947_fu_797_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln947_fu_822_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln947_fu_825_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_6_fu_831_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln947_fu_852_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_862_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln949_fu_875_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_5_fu_880_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln949_fu_869_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln949_fu_887_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_fu_857_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln949_fu_893_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_918_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_926_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_926_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln958_fu_932_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_1_fu_935_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln961_fu_941_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_2_fu_944_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln964_fu_978_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln964_fu_983_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_6_fu_975_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_988_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_12_fu_995_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln738_fu_1007_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln739_fu_1011_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_235_ce : STD_LOGIC;
    signal grp_fu_400_ce : STD_LOGIC;
    signal grp_fu_918_ce : STD_LOGIC;
    signal grp_fu_926_ce : STD_LOGIC;
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal regslice_both_out_data_U_apdone_blk : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal regslice_both_in_data_U_apdone_blk : STD_LOGIC;
    signal in_r_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal in_r_TVALID_int : STD_LOGIC;
    signal in_r_TREADY_int : STD_LOGIC;
    signal regslice_both_in_data_U_ack_in : STD_LOGIC;
    signal regslice_both_in_last_V_U_apdone_blk : STD_LOGIC;
    signal in_r_TLAST_int : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_in_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_last_V_U_ack_in : STD_LOGIC;
    signal out_r_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal out_r_TVALID_int : STD_LOGIC;
    signal out_r_TREADY_int : STD_LOGIC;
    signal regslice_both_out_data_U_vld_out : STD_LOGIC;
    signal regslice_both_out_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_last_V_U_vld_out : STD_LOGIC;

    component myproject IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        dense_input_V_ap_vld : IN STD_LOGIC;
        dense_input_V : IN STD_LOGIC_VECTOR (255 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
        dense_input_V_blk_n : OUT STD_LOGIC );
    end component;


    component myproject_axi_fpext_32ns_64_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component myproject_axi_ashr_54ns_32ns_54_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        OP : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (53 downto 0);
        din1 : IN STD_LOGIC_VECTOR (53 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (53 downto 0) );
    end component;


    component myproject_axi_mux_42_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component myproject_axi_lshr_32ns_32ns_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        OP : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component myproject_axi_shl_64ns_32ns_64_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        OP : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    grp_myproject_fu_230 : component myproject
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_myproject_fu_230_ap_start,
        ap_done => grp_myproject_fu_230_ap_done,
        ap_idle => grp_myproject_fu_230_ap_idle,
        ap_ready => grp_myproject_fu_230_ap_ready,
        dense_input_V_ap_vld => ap_const_logic_1,
        dense_input_V => in_local_V_fu_174,
        ap_return_0 => grp_myproject_fu_230_ap_return_0,
        ap_return_1 => grp_myproject_fu_230_ap_return_1,
        ap_return_2 => grp_myproject_fu_230_ap_return_2,
        ap_return_3 => grp_myproject_fu_230_ap_return_3,
        dense_input_V_blk_n => grp_myproject_fu_230_dense_input_V_blk_n);

    myproject_axi_fpext_32ns_64_3_1_U61 : component myproject_axi_fpext_32ns_64_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => in_r_TDATA_int,
        ce => grp_fu_235_ce,
        dout => grp_fu_235_p1);

    myproject_axi_ashr_54ns_32ns_54_2_1_U62 : component myproject_axi_ashr_54ns_32ns_54_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        OP => 2,
        din0_WIDTH => 54,
        din1_WIDTH => 32,
        dout_WIDTH => 54)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => man_V_2_reg_1075,
        din1 => grp_fu_400_p1,
        ce => grp_fu_400_ce,
        dout => grp_fu_400_p2);

    myproject_axi_mux_42_16_1_1_U63 : component myproject_axi_mux_42_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => out_local_0_V_reg_1191,
        din1 => out_local_1_V_reg_1196,
        din2 => out_local_2_V_reg_1201,
        din3 => out_local_3_V_reg_1206,
        din4 => tmp_V_3_fu_712_p5,
        dout => tmp_V_3_fu_712_p6);

    myproject_axi_lshr_32ns_32ns_32_2_1_U64 : component myproject_axi_lshr_32ns_32ns_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        OP => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_918_p0,
        din1 => add_ln958_reg_1298,
        ce => grp_fu_918_ce,
        dout => grp_fu_918_p2);

    myproject_axi_shl_64ns_32ns_64_2_1_U65 : component myproject_axi_shl_64ns_32ns_64_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        OP => 0,
        din0_WIDTH => 64,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_926_p0,
        din1 => grp_fu_926_p1,
        ce => grp_fu_926_ce,
        dout => grp_fu_926_p2);

    regslice_both_in_data_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_r_TDATA,
        vld_in => in_r_TVALID,
        ack_in => regslice_both_in_data_U_ack_in,
        data_out => in_r_TDATA_int,
        vld_out => in_r_TVALID_int,
        ack_out => in_r_TREADY_int,
        apdone_blk => regslice_both_in_data_U_apdone_blk);

    regslice_both_in_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_r_TLAST,
        vld_in => in_r_TVALID,
        ack_in => regslice_both_in_last_V_U_ack_in,
        data_out => in_r_TLAST_int,
        vld_out => regslice_both_in_last_V_U_vld_out,
        ack_out => in_r_TREADY_int,
        apdone_blk => regslice_both_in_last_V_U_apdone_blk);

    regslice_both_out_data_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => out_r_TDATA_int,
        vld_in => out_r_TVALID_int,
        ack_in => out_r_TREADY_int,
        data_out => out_r_TDATA,
        vld_out => regslice_both_out_data_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_data_U_apdone_blk);

    regslice_both_out_last_V_U : component regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => and_ln30_reg_1237_pp1_iter7_reg,
        vld_in => out_r_TVALID_int,
        ack_in => regslice_both_out_last_V_U_ack_in_dummy,
        data_out => out_r_TLAST,
        vld_out => regslice_both_out_last_V_U_vld_out,
        ack_out => out_r_TREADY,
        apdone_blk => regslice_both_out_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state18) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state18)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state18);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter7 <= ap_enable_reg_pp1_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter8 <= ap_enable_reg_pp1_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter9 <= ap_enable_reg_pp1_iter8;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                    ap_enable_reg_pp1_iter9 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_myproject_fu_230_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_myproject_fu_230_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state11) and (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))))) then 
                    grp_myproject_fu_230_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_myproject_fu_230_ap_ready = ap_const_logic_1)) then 
                    grp_myproject_fu_230_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i2_0_reg_219_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln27_fu_696_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                i2_0_reg_219 <= i_1_fu_702_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                i2_0_reg_219 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_0_reg_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                i_0_reg_208 <= ap_const_lv5_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln19_fu_238_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_0_reg_208 <= i_fu_244_p2;
            end if; 
        end if;
    end process;

    is_last_0_reg_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                is_last_0_reg_196 <= ap_const_lv1_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln19_reg_1030 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                is_last_0_reg_196 <= is_last_reg_1050;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln935_reg_1242_pp1_iter2_reg = ap_const_lv1_0) and (icmp_ln27_reg_1211_pp1_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                add_ln958_reg_1298 <= add_ln958_fu_842_p2;
                icmp_ln947_1_reg_1293 <= icmp_ln947_1_fu_836_p2;
                lsb_index_reg_1282 <= lsb_index_fu_807_p2;
                sub_ln958_reg_1303 <= sub_ln958_fu_847_p2;
                tmp_8_reg_1288 <= lsb_index_fu_807_p2(31 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln19_reg_1030_pp0_iter6_reg = ap_const_lv1_0))) then
                and_ln203_reg_1185 <= and_ln203_fu_629_p2;
                shl_ln203_reg_1179 <= shl_ln203_fu_611_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln27_fu_696_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                and_ln30_reg_1237 <= and_ln30_fu_742_p2;
                p_Result_10_reg_1226 <= tmp_V_3_fu_712_p6(15 downto 15);
                tmp_V_3_reg_1220 <= tmp_V_3_fu_712_p6;
                tmp_V_reg_1232 <= tmp_V_fu_730_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                and_ln30_reg_1237_pp1_iter1_reg <= and_ln30_reg_1237;
                icmp_ln27_reg_1211 <= icmp_ln27_fu_696_p2;
                icmp_ln27_reg_1211_pp1_iter1_reg <= icmp_ln27_reg_1211;
                p_Result_10_reg_1226_pp1_iter1_reg <= p_Result_10_reg_1226;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                and_ln30_reg_1237_pp1_iter2_reg <= and_ln30_reg_1237_pp1_iter1_reg;
                and_ln30_reg_1237_pp1_iter3_reg <= and_ln30_reg_1237_pp1_iter2_reg;
                and_ln30_reg_1237_pp1_iter4_reg <= and_ln30_reg_1237_pp1_iter3_reg;
                and_ln30_reg_1237_pp1_iter5_reg <= and_ln30_reg_1237_pp1_iter4_reg;
                and_ln30_reg_1237_pp1_iter6_reg <= and_ln30_reg_1237_pp1_iter5_reg;
                and_ln30_reg_1237_pp1_iter7_reg <= and_ln30_reg_1237_pp1_iter6_reg;
                icmp_ln27_reg_1211_pp1_iter2_reg <= icmp_ln27_reg_1211_pp1_iter1_reg;
                icmp_ln27_reg_1211_pp1_iter3_reg <= icmp_ln27_reg_1211_pp1_iter2_reg;
                icmp_ln27_reg_1211_pp1_iter4_reg <= icmp_ln27_reg_1211_pp1_iter3_reg;
                icmp_ln27_reg_1211_pp1_iter5_reg <= icmp_ln27_reg_1211_pp1_iter4_reg;
                icmp_ln27_reg_1211_pp1_iter6_reg <= icmp_ln27_reg_1211_pp1_iter5_reg;
                icmp_ln27_reg_1211_pp1_iter7_reg <= icmp_ln27_reg_1211_pp1_iter6_reg;
                icmp_ln27_reg_1211_pp1_iter8_reg <= icmp_ln27_reg_1211_pp1_iter7_reg;
                icmp_ln935_reg_1242_pp1_iter2_reg <= icmp_ln935_reg_1242;
                icmp_ln935_reg_1242_pp1_iter3_reg <= icmp_ln935_reg_1242_pp1_iter2_reg;
                icmp_ln935_reg_1242_pp1_iter4_reg <= icmp_ln935_reg_1242_pp1_iter3_reg;
                icmp_ln935_reg_1242_pp1_iter5_reg <= icmp_ln935_reg_1242_pp1_iter4_reg;
                icmp_ln935_reg_1242_pp1_iter6_reg <= icmp_ln935_reg_1242_pp1_iter5_reg;
                icmp_ln935_reg_1242_pp1_iter7_reg <= icmp_ln935_reg_1242_pp1_iter6_reg;
                icmp_ln958_reg_1323_pp1_iter5_reg <= icmp_ln958_reg_1323;
                m_5_reg_1343_pp1_iter7_reg <= m_5_reg_1343;
                    or_ln_reg_1308_pp1_iter5_reg(0) <= or_ln_reg_1308(0);
                p_Result_10_reg_1226_pp1_iter2_reg <= p_Result_10_reg_1226_pp1_iter1_reg;
                p_Result_10_reg_1226_pp1_iter3_reg <= p_Result_10_reg_1226_pp1_iter2_reg;
                p_Result_10_reg_1226_pp1_iter4_reg <= p_Result_10_reg_1226_pp1_iter3_reg;
                p_Result_10_reg_1226_pp1_iter5_reg <= p_Result_10_reg_1226_pp1_iter4_reg;
                p_Result_10_reg_1226_pp1_iter6_reg <= p_Result_10_reg_1226_pp1_iter5_reg;
                p_Result_10_reg_1226_pp1_iter7_reg <= p_Result_10_reg_1226_pp1_iter6_reg;
                tmp_V_4_reg_1247_pp1_iter2_reg <= tmp_V_4_reg_1247;
                tmp_V_4_reg_1247_pp1_iter3_reg <= tmp_V_4_reg_1247_pp1_iter2_reg;
                trunc_ln943_reg_1260_pp1_iter2_reg <= trunc_ln943_reg_1260;
                trunc_ln943_reg_1260_pp1_iter3_reg <= trunc_ln943_reg_1260_pp1_iter2_reg;
                trunc_ln943_reg_1260_pp1_iter4_reg <= trunc_ln943_reg_1260_pp1_iter3_reg;
                trunc_ln943_reg_1260_pp1_iter5_reg <= trunc_ln943_reg_1260_pp1_iter4_reg;
                trunc_ln943_reg_1260_pp1_iter6_reg <= trunc_ln943_reg_1260_pp1_iter5_reg;
                trunc_ln943_reg_1260_pp1_iter7_reg <= trunc_ln943_reg_1260_pp1_iter6_reg;
                trunc_ln944_reg_1272_pp1_iter3_reg <= trunc_ln944_reg_1272;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln19_reg_1030_pp0_iter3_reg = ap_const_lv1_0))) then
                and_ln585_reg_1125 <= and_ln585_fu_445_p2;
                and_ln603_reg_1130 <= and_ln603_fu_468_p2;
                or_ln603_reg_1135 <= or_ln603_fu_474_p2;
                select_ln603_1_reg_1141 <= select_ln603_1_fu_480_p3;
                sext_ln581_reg_1115 <= sext_ln581_fu_383_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                and_ln603_reg_1130_pp0_iter5_reg <= and_ln603_reg_1130;
                icmp_ln19_reg_1030_pp0_iter2_reg <= icmp_ln19_reg_1030_pp0_iter1_reg;
                icmp_ln19_reg_1030_pp0_iter3_reg <= icmp_ln19_reg_1030_pp0_iter2_reg;
                icmp_ln19_reg_1030_pp0_iter4_reg <= icmp_ln19_reg_1030_pp0_iter3_reg;
                icmp_ln19_reg_1030_pp0_iter5_reg <= icmp_ln19_reg_1030_pp0_iter4_reg;
                icmp_ln19_reg_1030_pp0_iter6_reg <= icmp_ln19_reg_1030_pp0_iter5_reg;
                icmp_ln19_reg_1030_pp0_iter7_reg <= icmp_ln19_reg_1030_pp0_iter6_reg;
                icmp_ln203_reg_1171_pp0_iter7_reg <= icmp_ln203_reg_1171;
                icmp_ln571_reg_1080_pp0_iter4_reg <= icmp_ln571_reg_1080;
                icmp_ln582_reg_1098_pp0_iter4_reg <= icmp_ln582_reg_1098;
                in_data_tmp_reg_1039_pp0_iter2_reg <= in_data_tmp_reg_1039_pp0_iter1_reg;
                in_data_tmp_reg_1039_pp0_iter3_reg <= in_data_tmp_reg_1039_pp0_iter2_reg;
                or_ln603_2_reg_1151_pp0_iter6_reg <= or_ln603_2_reg_1151;
                or_ln603_reg_1135_pp0_iter5_reg <= or_ln603_reg_1135;
                select_ln603_1_reg_1141_pp0_iter5_reg <= select_ln603_1_reg_1141;
                sext_ln581_reg_1115_pp0_iter5_reg <= sext_ln581_reg_1115;
                trunc_ln203_reg_1045_pp0_iter2_reg <= trunc_ln203_reg_1045_pp0_iter1_reg;
                trunc_ln203_reg_1045_pp0_iter3_reg <= trunc_ln203_reg_1045_pp0_iter2_reg;
                trunc_ln203_reg_1045_pp0_iter4_reg <= trunc_ln203_reg_1045_pp0_iter3_reg;
                trunc_ln203_reg_1045_pp0_iter5_reg <= trunc_ln203_reg_1045_pp0_iter4_reg;
                trunc_ln583_reg_1104_pp0_iter4_reg <= trunc_ln583_reg_1104;
                trunc_ln583_reg_1104_pp0_iter5_reg <= trunc_ln583_reg_1104_pp0_iter4_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln19_reg_1030_pp0_iter4_reg = ap_const_lv1_0))) then
                ashr_ln586_reg_1146 <= grp_fu_400_p2;
                or_ln603_2_reg_1151 <= or_ln603_2_fu_502_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln19_reg_1030_pp0_iter5_reg = ap_const_lv1_0))) then
                    empty_32_reg_1166(7 downto 4) <= empty_32_fu_538_p2(7 downto 4);
                icmp_ln203_reg_1171 <= icmp_ln203_fu_544_p2;
                    shl_ln_reg_1161(7 downto 4) <= shl_ln_fu_531_p3(7 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln19_reg_1030_pp0_iter1_reg = ap_const_lv1_0))) then
                exp_tmp_V_reg_1065 <= ireg_V_fu_269_p1(62 downto 52);
                p_Result_8_reg_1060 <= ireg_V_fu_269_p1(63 downto 63);
                trunc_ln556_reg_1055 <= trunc_ln556_fu_273_p1;
                trunc_ln565_reg_1070 <= trunc_ln565_fu_295_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln19_reg_1030 <= icmp_ln19_fu_238_p2;
                icmp_ln19_reg_1030_pp0_iter1_reg <= icmp_ln19_reg_1030;
                in_data_tmp_reg_1039_pp0_iter1_reg <= in_data_tmp_reg_1039;
                trunc_ln203_reg_1045_pp0_iter1_reg <= trunc_ln203_reg_1045;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln19_reg_1030_pp0_iter2_reg = ap_const_lv1_0))) then
                icmp_ln571_reg_1080 <= icmp_ln571_fu_326_p2;
                icmp_ln581_reg_1086 <= icmp_ln581_fu_337_p2;
                icmp_ln582_reg_1098 <= icmp_ln582_fu_363_p2;
                man_V_2_reg_1075 <= man_V_2_fu_319_p3;
                sh_amt_reg_1092 <= sh_amt_fu_355_p3;
                tmp_4_reg_1110 <= sh_amt_fu_355_p3(11 downto 4);
                trunc_ln583_reg_1104 <= trunc_ln583_fu_369_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln27_reg_1211 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln935_reg_1242 <= icmp_ln935_fu_748_p2;
                l_reg_1255 <= l_fu_776_p3;
                tmp_V_4_reg_1247 <= tmp_V_4_fu_753_p3;
                trunc_ln943_reg_1260 <= trunc_ln943_fu_784_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln935_reg_1242_pp1_iter3_reg = ap_const_lv1_0) and (icmp_ln27_reg_1211_pp1_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln958_reg_1323 <= icmp_ln958_fu_913_p2;
                    or_ln_reg_1308(0) <= or_ln_fu_899_p3(0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln19_fu_238_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                in_data_tmp_reg_1039 <= in_r_TDATA_int;
                trunc_ln203_reg_1045 <= trunc_ln203_fu_259_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln19_reg_1030_pp0_iter7_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then
                in_local_V_fu_174 <= in_local_V_1_fu_669_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln19_fu_238_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                is_last_reg_1050 <= is_last_fu_263_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln935_reg_1242_pp1_iter4_reg = ap_const_lv1_0) and (icmp_ln27_reg_1211_pp1_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                lshr_ln958_reg_1333 <= grp_fu_918_p2;
                shl_ln958_reg_1338 <= grp_fu_926_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln935_reg_1242_pp1_iter5_reg = ap_const_lv1_0) and (icmp_ln27_reg_1211_pp1_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                m_5_reg_1343 <= m_2_fu_944_p2(63 downto 1);
                tmp_10_reg_1348 <= m_2_fu_944_p2(25 downto 25);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                out_local_0_V_reg_1191 <= grp_myproject_fu_230_ap_return_0;
                out_local_1_V_reg_1196 <= grp_myproject_fu_230_ap_return_1;
                out_local_2_V_reg_1201 <= grp_myproject_fu_230_ap_return_2;
                out_local_3_V_reg_1206 <= grp_myproject_fu_230_ap_return_3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln19_reg_1030_pp0_iter5_reg = ap_const_lv1_0) and (or_ln603_2_reg_1151 = ap_const_lv1_1))) then
                select_ln603_2_reg_1156 <= select_ln603_2_fu_525_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln935_reg_1242_pp1_iter6_reg = ap_const_lv1_0) and (icmp_ln27_reg_1211_pp1_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                    select_ln964_reg_1353(0) <= select_ln964_fu_968_p3(0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln935_reg_1242 = ap_const_lv1_0) and (icmp_ln27_reg_1211_pp1_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                sub_ln944_reg_1265 <= sub_ln944_fu_788_p2;
                sub_ln947_reg_1277 <= sub_ln947_fu_801_p2;
                trunc_ln944_reg_1272 <= trunc_ln944_fu_793_p1;
            end if;
        end if;
    end process;
    shl_ln_reg_1161(3 downto 0) <= "0000";
    empty_32_reg_1166(3 downto 0) <= "1111";
    or_ln_reg_1308(31 downto 1) <= "0000000000000000000000000000000";
    or_ln_reg_1308_pp1_iter5_reg(31 downto 1) <= "0000000000000000000000000000000";
    select_ln964_reg_1353(7 downto 1) <= "0111111";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_enable_reg_pp0_iter0, icmp_ln19_fu_238_p2, ap_enable_reg_pp1_iter8, ap_enable_reg_pp1_iter9, icmp_ln27_fu_696_p2, ap_enable_reg_pp1_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter1, ap_CS_fsm_state28, regslice_both_out_data_U_apdone_blk)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln19_fu_238_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)) or ((icmp_ln19_fu_238_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln27_fu_696_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp1_iter8 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter9 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter8 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter9 = ap_const_logic_1)) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln27_fu_696_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state28 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state28) and (regslice_both_out_data_U_apdone_blk = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    F2_fu_331_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln461_fu_299_p1));
    a_fu_857_p2 <= (icmp_ln947_fu_852_p2 and icmp_ln947_1_reg_1293);
    add_ln581_fu_343_p2 <= std_logic_vector(signed(ap_const_lv12_FF6) + signed(F2_fu_331_p2));
    add_ln949_fu_875_p2 <= std_logic_vector(signed(ap_const_lv16_FFE8) + signed(trunc_ln944_reg_1272_pp1_iter3_reg));
    add_ln958_fu_842_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFE7) + signed(sub_ln944_reg_1265));
    add_ln964_fu_983_p2 <= std_logic_vector(unsigned(select_ln964_reg_1353) + unsigned(sub_ln964_fu_978_p2));
    and_ln203_1_fu_658_p2 <= (xor_ln203_2_fu_653_p2 and in_local_V_fu_174);
    and_ln203_2_fu_664_p2 <= (select_ln203_3_fu_647_p3 and and_ln203_reg_1185);
    and_ln203_fu_629_p2 <= (shl_ln203_1_fu_617_p2 and lshr_ln203_fu_623_p2);
    and_ln30_fu_742_p2 <= (is_last_0_reg_196 and icmp_ln30_fu_736_p2);
    and_ln581_fu_434_p2 <= (xor_ln582_fu_428_p2 and icmp_ln581_reg_1086);
    and_ln582_fu_492_p2 <= (xor_ln571_fu_487_p2 and icmp_ln582_reg_1098_pp0_iter4_reg);
    and_ln585_1_fu_451_p2 <= (icmp_ln585_fu_386_p2 and and_ln581_fu_434_p2);
    and_ln585_fu_445_p2 <= (xor_ln585_fu_439_p2 and and_ln581_fu_434_p2);
    and_ln603_fu_468_p2 <= (xor_ln581_fu_462_p2 and icmp_ln603_fu_391_p2);
    and_ln949_fu_887_p2 <= (xor_ln949_fu_869_p2 and p_Result_5_fu_880_p3);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(9);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(2);
    ap_CS_fsm_state17 <= ap_CS_fsm(8);
    ap_CS_fsm_state28 <= ap_CS_fsm(10);
    ap_NS_fsm_state11 <= ap_NS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln19_fu_238_p2, in_r_TVALID_int)
    begin
                ap_block_pp0_stage0_11001 <= ((icmp_ln19_fu_238_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln19_fu_238_p2, in_r_TVALID_int)
    begin
                ap_block_pp0_stage0_subdone <= ((icmp_ln19_fu_238_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter8, ap_enable_reg_pp1_iter9, ap_block_state26_io, ap_block_state27_io)
    begin
                ap_block_pp1_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state27_io) and (ap_enable_reg_pp1_iter9 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state26_io) and (ap_enable_reg_pp1_iter8 = ap_const_logic_1)));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter8, ap_enable_reg_pp1_iter9, ap_block_state26_io, ap_block_state27_io)
    begin
                ap_block_pp1_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state27_io) and (ap_enable_reg_pp1_iter9 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state26_io) and (ap_enable_reg_pp1_iter8 = ap_const_logic_1)));
    end process;

        ap_block_state10_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp1_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp1_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp1_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp1_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state26_io_assign_proc : process(icmp_ln27_reg_1211_pp1_iter7_reg, out_r_TREADY_int)
    begin
                ap_block_state26_io <= ((icmp_ln27_reg_1211_pp1_iter7_reg = ap_const_lv1_0) and (out_r_TREADY_int = ap_const_logic_0));
    end process;

        ap_block_state26_pp1_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state27_io_assign_proc : process(icmp_ln27_reg_1211_pp1_iter8_reg, out_r_TREADY_int)
    begin
                ap_block_state27_io <= ((icmp_ln27_reg_1211_pp1_iter8_reg = ap_const_lv1_0) and (out_r_TREADY_int = ap_const_logic_0));
    end process;

        ap_block_state27_pp1_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter0_assign_proc : process(icmp_ln19_fu_238_p2, in_r_TVALID_int)
    begin
                ap_block_state2_pp0_stage0_iter0 <= ((icmp_ln19_fu_238_p2 = ap_const_lv1_0) and (in_r_TVALID_int = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln19_fu_238_p2)
    begin
        if ((icmp_ln19_fu_238_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state18_assign_proc : process(icmp_ln27_fu_696_p2)
    begin
        if ((icmp_ln27_fu_696_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state18 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state18 <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter8, ap_enable_reg_pp1_iter9, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter4, ap_enable_reg_pp1_iter5, ap_enable_reg_pp1_iter6, ap_enable_reg_pp1_iter7)
    begin
        if (((ap_enable_reg_pp1_iter9 = ap_const_logic_0) and (ap_enable_reg_pp1_iter8 = ap_const_logic_0) and (ap_enable_reg_pp1_iter7 = ap_const_logic_0) and (ap_enable_reg_pp1_iter6 = ap_const_logic_0) and (ap_enable_reg_pp1_iter5 = ap_const_logic_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_is_last_0_phi_fu_200_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, is_last_0_reg_196, icmp_ln19_reg_1030, is_last_reg_1050, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln19_reg_1030 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_is_last_0_phi_fu_200_p4 <= is_last_reg_1050;
        else 
            ap_phi_mux_is_last_0_phi_fu_200_p4 <= is_last_0_reg_196;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bitcast_ln696_fu_405_p1 <= in_data_tmp_reg_1039_pp0_iter3_reg;
    bitcast_ln739_fu_1011_p1 <= trunc_ln738_fu_1007_p1;
    empty_32_fu_538_p2 <= (shl_ln_fu_531_p3 or ap_const_lv8_F);

    grp_fu_235_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_235_ce <= ap_const_logic_1;
        else 
            grp_fu_235_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_400_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_400_ce <= ap_const_logic_1;
        else 
            grp_fu_400_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln581_fu_383_p1),54));

    grp_fu_918_ce_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            grp_fu_918_ce <= ap_const_logic_1;
        else 
            grp_fu_918_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_918_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_4_reg_1247_pp1_iter3_reg),32));

    grp_fu_926_ce_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            grp_fu_926_ce <= ap_const_logic_1;
        else 
            grp_fu_926_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_926_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_4_reg_1247_pp1_iter3_reg),64));
    grp_fu_926_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln958_reg_1303),64));
    grp_myproject_fu_230_ap_start <= grp_myproject_fu_230_ap_start_reg;
    i_1_fu_702_p2 <= std_logic_vector(unsigned(i2_0_reg_219) + unsigned(ap_const_lv3_1));
    i_fu_244_p2 <= std_logic_vector(unsigned(i_0_reg_208) + unsigned(ap_const_lv5_1));
    icmp_ln19_fu_238_p2 <= "1" when (i_0_reg_208 = ap_const_lv5_10) else "0";
    icmp_ln203_fu_544_p2 <= "1" when (unsigned(shl_ln_fu_531_p3) > unsigned(empty_32_fu_538_p2)) else "0";
    icmp_ln27_fu_696_p2 <= "1" when (i2_0_reg_219 = ap_const_lv3_4) else "0";
    icmp_ln30_fu_736_p2 <= "1" when (i2_0_reg_219 = ap_const_lv3_3) else "0";
    icmp_ln571_fu_326_p2 <= "1" when (trunc_ln556_reg_1055 = ap_const_lv63_0) else "0";
    icmp_ln581_fu_337_p2 <= "1" when (signed(F2_fu_331_p2) > signed(ap_const_lv12_A)) else "0";
    icmp_ln582_fu_363_p2 <= "1" when (F2_fu_331_p2 = ap_const_lv12_A) else "0";
    icmp_ln585_fu_386_p2 <= "1" when (unsigned(sh_amt_reg_1092) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln603_fu_391_p2 <= "1" when (tmp_4_reg_1110 = ap_const_lv8_0) else "0";
    icmp_ln935_fu_748_p2 <= "1" when (tmp_V_3_reg_1220 = ap_const_lv16_0) else "0";
    icmp_ln947_1_fu_836_p2 <= "0" when (p_Result_6_fu_831_p2 = ap_const_lv16_0) else "1";
    icmp_ln947_fu_852_p2 <= "1" when (signed(tmp_8_reg_1288) > signed(ap_const_lv31_0)) else "0";
    icmp_ln958_fu_913_p2 <= "1" when (signed(lsb_index_reg_1282) > signed(ap_const_lv32_0)) else "0";
    in_local_V_1_fu_669_p2 <= (and_ln203_2_fu_664_p2 or and_ln203_1_fu_658_p2);

    in_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, icmp_ln19_fu_238_p2, in_r_TVALID_int)
    begin
        if (((icmp_ln19_fu_238_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_r_TDATA_blk_n <= in_r_TVALID_int;
        else 
            in_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_r_TREADY_assign_proc : process(in_r_TVALID, regslice_both_in_data_U_ack_in)
    begin
        if (((in_r_TVALID = ap_const_logic_1) and (regslice_both_in_data_U_ack_in = ap_const_logic_1))) then 
            in_r_TREADY <= ap_const_logic_1;
        else 
            in_r_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    in_r_TREADY_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln19_fu_238_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln19_fu_238_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_r_TREADY_int <= ap_const_logic_1;
        else 
            in_r_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;

    ireg_V_fu_269_p1 <= grp_fu_235_p1;
    is_last_fu_263_p2 <= (in_r_TLAST_int or ap_phi_mux_is_last_0_phi_fu_200_p4);
    
    l_fu_776_p3_proc : process(p_Result_11_fu_768_p3)
    begin
        l_fu_776_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_11_fu_768_p3(i) = '1' then
                l_fu_776_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    lsb_index_fu_807_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFE8) + signed(sub_ln944_reg_1265));
    lshr_ln203_fu_623_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv256_lc_1),to_integer(unsigned('0' & zext_ln203_5_fu_607_p1(31-1 downto 0)))));
    lshr_ln947_fu_825_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv16_FFFF),to_integer(unsigned('0' & zext_ln947_fu_822_p1(16-1 downto 0)))));
    m_1_fu_935_p3 <= 
        zext_ln958_fu_932_p1 when (icmp_ln958_reg_1323_pp1_iter5_reg(0) = '1') else 
        shl_ln958_reg_1338;
    m_2_fu_944_p2 <= std_logic_vector(unsigned(m_1_fu_935_p3) + unsigned(zext_ln961_fu_941_p1));
    m_6_fu_975_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_5_reg_1343_pp1_iter7_reg),64));
    man_V_1_fu_313_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(p_Result_9_fu_309_p1));
    man_V_2_fu_319_p3 <= 
        man_V_1_fu_313_p2 when (p_Result_8_reg_1060(0) = '1') else 
        p_Result_9_fu_309_p1;
    or_ln581_fu_457_p2 <= (or_ln582_fu_424_p2 or icmp_ln581_reg_1086);
    or_ln582_fu_424_p2 <= (icmp_ln582_reg_1098 or icmp_ln571_reg_1080);
    or_ln603_1_fu_497_p2 <= (and_ln585_reg_1125 or and_ln582_fu_492_p2);
    or_ln603_2_fu_502_p2 <= (or_ln603_reg_1135 or or_ln603_1_fu_497_p2);
    or_ln603_fu_474_p2 <= (and_ln603_fu_468_p2 or and_ln585_1_fu_451_p2);
    or_ln949_fu_893_p2 <= (and_ln949_fu_887_p2 or a_fu_857_p2);
    or_ln_fu_899_p3 <= (ap_const_lv31_0 & or_ln949_fu_893_p2);

    out_r_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp1_iter8, ap_block_pp1_stage0, icmp_ln27_reg_1211_pp1_iter7_reg, ap_enable_reg_pp1_iter9, icmp_ln27_reg_1211_pp1_iter8_reg, out_r_TREADY_int)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0) and (icmp_ln27_reg_1211_pp1_iter8_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter9 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0) and (icmp_ln27_reg_1211_pp1_iter7_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter8 = ap_const_logic_1)))) then 
            out_r_TDATA_blk_n <= out_r_TREADY_int;
        else 
            out_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_r_TDATA_int <= 
        ap_const_lv32_0 when (icmp_ln935_reg_1242_pp1_iter7_reg(0) = '1') else 
        bitcast_ln739_fu_1011_p1;
    out_r_TVALID <= regslice_both_out_data_U_vld_out;

    out_r_TVALID_int_assign_proc : process(ap_enable_reg_pp1_iter8, icmp_ln27_reg_1211_pp1_iter7_reg, ap_block_pp1_stage0_11001)
    begin
        if (((icmp_ln27_reg_1211_pp1_iter7_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter8 = ap_const_logic_1))) then 
            out_r_TVALID_int <= ap_const_logic_1;
        else 
            out_r_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_11_fu_768_p3 <= (ap_const_lv16_FFFF & p_Result_s_fu_758_p4);
    p_Result_12_fu_995_p5 <= (m_6_fu_975_p1(63 downto 32) & tmp_3_fu_988_p3 & m_6_fu_975_p1(22 downto 0));
    p_Result_5_fu_880_p3 <= tmp_V_4_reg_1247_pp1_iter3_reg(to_integer(unsigned(add_ln949_fu_875_p2)) downto to_integer(unsigned(add_ln949_fu_875_p2))) when (to_integer(unsigned(add_ln949_fu_875_p2))>= 0 and to_integer(unsigned(add_ln949_fu_875_p2))<=15) else "-";
    p_Result_6_fu_831_p2 <= (tmp_V_4_reg_1247_pp1_iter2_reg and lshr_ln947_fu_825_p2);
    p_Result_9_fu_309_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_302_p3),54));
    
    p_Result_s_fu_758_p4_proc : process(tmp_V_4_fu_753_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(16+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(16+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable p_Result_s_fu_758_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(16 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(4 - 1 downto 0) := ap_const_lv32_F(4 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(4 - 1 downto 0) := ap_const_lv32_0(4 - 1 downto 0);
        v0_cpy := tmp_V_4_fu_753_p3;
        if (vlo_cpy(4 - 1 downto 0) > vhi_cpy(4 - 1 downto 0)) then
            vhi_cpy(4-1 downto 0) := std_logic_vector(16-1-unsigned(ap_const_lv32_0(4-1 downto 0)));
            vlo_cpy(4-1 downto 0) := std_logic_vector(16-1-unsigned(ap_const_lv32_F(4-1 downto 0)));
            for p_Result_s_fu_758_p4_i in 0 to 16-1 loop
                v0_cpy(p_Result_s_fu_758_p4_i) := tmp_V_4_fu_753_p3(16-1-p_Result_s_fu_758_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(4-1 downto 0)))));

        section := (others=>'0');
        section(4-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(4-1 downto 0)) - unsigned(vlo_cpy(4-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(16-1 downto 0)))));
        res_mask := res_mask(16-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_s_fu_758_p4 <= resvalue(16-1 downto 0);
    end process;

    select_ln203_1_fu_579_p3 <= 
        zext_ln203_1_fu_559_p1 when (icmp_ln203_reg_1171(0) = '1') else 
        zext_ln203_fu_556_p1;
    select_ln203_2_fu_586_p3 <= 
        xor_ln203_fu_566_p2 when (icmp_ln203_reg_1171(0) = '1') else 
        zext_ln203_fu_556_p1;
    select_ln203_3_fu_647_p3 <= 
        tmp_6_fu_638_p4 when (icmp_ln203_reg_1171_pp0_iter7_reg(0) = '1') else 
        shl_ln203_reg_1179;
    select_ln203_fu_572_p3 <= 
        zext_ln203_fu_556_p1 when (icmp_ln203_reg_1171(0) = '1') else 
        zext_ln203_1_fu_559_p1;
    select_ln588_fu_416_p3 <= 
        ap_const_lv16_FFFF when (tmp_5_fu_408_p3(0) = '1') else 
        ap_const_lv16_0;
    select_ln603_1_fu_480_p3 <= 
        select_ln588_fu_416_p3 when (and_ln585_fu_445_p2(0) = '1') else 
        trunc_ln583_reg_1104;
    select_ln603_2_fu_525_p3 <= 
        select_ln603_fu_518_p3 when (or_ln603_reg_1135_pp0_iter5_reg(0) = '1') else 
        select_ln603_1_reg_1141_pp0_iter5_reg;
    select_ln603_3_fu_550_p3 <= 
        select_ln603_2_reg_1156 when (or_ln603_2_reg_1151_pp0_iter6_reg(0) = '1') else 
        ap_const_lv16_0;
    select_ln603_fu_518_p3 <= 
        shl_ln604_fu_513_p2 when (and_ln603_reg_1130_pp0_iter5_reg(0) = '1') else 
        trunc_ln586_fu_507_p1;
    select_ln964_fu_968_p3 <= 
        ap_const_lv8_7F when (tmp_10_reg_1348(0) = '1') else 
        ap_const_lv8_7E;
        sext_ln581_fu_383_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_reg_1092),32));

    sext_ln581cast_fu_510_p1 <= sext_ln581_reg_1115_pp0_iter5_reg(16 - 1 downto 0);
    sh_amt_fu_355_p3 <= 
        add_ln581_fu_343_p2 when (icmp_ln581_fu_337_p2(0) = '1') else 
        sub_ln581_fu_349_p2;
    shl_ln203_1_fu_617_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv256_lc_1),to_integer(unsigned('0' & zext_ln203_4_fu_603_p1(31-1 downto 0)))));
    shl_ln203_fu_611_p2 <= std_logic_vector(shift_left(unsigned(zext_ln203_2_fu_562_p1),to_integer(unsigned('0' & zext_ln203_3_fu_599_p1(31-1 downto 0)))));
    shl_ln604_fu_513_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln583_reg_1104_pp0_iter5_reg),to_integer(unsigned('0' & sext_ln581cast_fu_510_p1(16-1 downto 0)))));
    shl_ln_fu_531_p3 <= (trunc_ln203_reg_1045_pp0_iter5_reg & ap_const_lv4_0);
    sub_ln581_fu_349_p2 <= std_logic_vector(unsigned(ap_const_lv12_A) - unsigned(F2_fu_331_p2));
    sub_ln944_fu_788_p2 <= std_logic_vector(unsigned(ap_const_lv32_10) - unsigned(l_reg_1255));
    sub_ln947_fu_801_p2 <= std_logic_vector(unsigned(ap_const_lv5_9) - unsigned(trunc_ln947_fu_797_p1));
    sub_ln958_fu_847_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(sub_ln944_reg_1265));
    sub_ln964_fu_978_p2 <= std_logic_vector(unsigned(ap_const_lv8_6) - unsigned(trunc_ln943_reg_1260_pp1_iter7_reg));
    tmp_3_fu_988_p3 <= (p_Result_10_reg_1226_pp1_iter7_reg & add_ln964_fu_983_p2);
    tmp_5_fu_408_p3 <= bitcast_ln696_fu_405_p1(31 downto 31);
    
    tmp_6_fu_638_p4_proc : process(shl_ln203_reg_1179)
    variable vlo_cpy : STD_LOGIC_VECTOR(256+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(256+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(256 - 1 downto 0);
    variable tmp_6_fu_638_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(256 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(256 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(256 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(8 - 1 downto 0) := ap_const_lv32_FF(8 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(8 - 1 downto 0) := ap_const_lv32_0(8 - 1 downto 0);
        v0_cpy := shl_ln203_reg_1179;
        if (vlo_cpy(8 - 1 downto 0) > vhi_cpy(8 - 1 downto 0)) then
            vhi_cpy(8-1 downto 0) := std_logic_vector(256-1-unsigned(ap_const_lv32_0(8-1 downto 0)));
            vlo_cpy(8-1 downto 0) := std_logic_vector(256-1-unsigned(ap_const_lv32_FF(8-1 downto 0)));
            for tmp_6_fu_638_p4_i in 0 to 256-1 loop
                v0_cpy(tmp_6_fu_638_p4_i) := shl_ln203_reg_1179(256-1-tmp_6_fu_638_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(8-1 downto 0)))));

        section := (others=>'0');
        section(8-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(8-1 downto 0)) - unsigned(vlo_cpy(8-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(256-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_6_fu_638_p4 <= resvalue(256-1 downto 0);
    end process;

    tmp_9_fu_862_p3 <= lsb_index_reg_1282(31 downto 31);
    tmp_V_3_fu_712_p5 <= i2_0_reg_219(2 - 1 downto 0);
    tmp_V_4_fu_753_p3 <= 
        tmp_V_reg_1232 when (p_Result_10_reg_1226(0) = '1') else 
        tmp_V_3_reg_1220;
    tmp_V_fu_730_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(tmp_V_3_fu_712_p6));
    tmp_s_fu_302_p3 <= (ap_const_lv1_1 & trunc_ln565_reg_1070);
    trunc_ln203_fu_259_p1 <= i_0_reg_208(4 - 1 downto 0);
    trunc_ln556_fu_273_p1 <= ireg_V_fu_269_p1(63 - 1 downto 0);
    trunc_ln565_fu_295_p1 <= ireg_V_fu_269_p1(52 - 1 downto 0);
    trunc_ln583_fu_369_p1 <= man_V_2_fu_319_p3(16 - 1 downto 0);
    trunc_ln586_fu_507_p1 <= ashr_ln586_reg_1146(16 - 1 downto 0);
    trunc_ln738_fu_1007_p1 <= p_Result_12_fu_995_p5(32 - 1 downto 0);
    trunc_ln943_fu_784_p1 <= l_fu_776_p3(8 - 1 downto 0);
    trunc_ln944_fu_793_p1 <= sub_ln944_fu_788_p2(16 - 1 downto 0);
    trunc_ln947_fu_797_p1 <= sub_ln944_fu_788_p2(5 - 1 downto 0);
    xor_ln203_1_fu_593_p2 <= (select_ln203_fu_572_p3 xor ap_const_lv9_FF);
    xor_ln203_2_fu_653_p2 <= (ap_const_lv256_lc_1 xor and_ln203_reg_1185);
    xor_ln203_fu_566_p2 <= (zext_ln203_fu_556_p1 xor ap_const_lv9_FF);
    xor_ln571_fu_487_p2 <= (icmp_ln571_reg_1080_pp0_iter4_reg xor ap_const_lv1_1);
    xor_ln581_fu_462_p2 <= (or_ln581_fu_457_p2 xor ap_const_lv1_1);
    xor_ln582_fu_428_p2 <= (or_ln582_fu_424_p2 xor ap_const_lv1_1);
    xor_ln585_fu_439_p2 <= (icmp_ln585_fu_386_p2 xor ap_const_lv1_1);
    xor_ln949_fu_869_p2 <= (tmp_9_fu_862_p3 xor ap_const_lv1_1);
    zext_ln203_1_fu_559_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_32_reg_1166),9));
    zext_ln203_2_fu_562_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln603_3_fu_550_p3),256));
    zext_ln203_3_fu_599_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln203_2_fu_586_p3),256));
    zext_ln203_4_fu_603_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln203_1_fu_579_p3),256));
    zext_ln203_5_fu_607_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln203_1_fu_593_p2),256));
    zext_ln203_fu_556_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_reg_1161),9));
    zext_ln461_fu_299_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_V_reg_1065),12));
    zext_ln947_fu_822_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln947_reg_1277),16));
    zext_ln958_fu_932_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln958_reg_1333),64));
    zext_ln961_fu_941_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_reg_1308_pp1_iter5_reg),64));
end behav;
