// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "myproject.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic myproject::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic myproject::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> myproject::ap_ST_fsm_pp0_stage0 = "1";
const sc_lv<32> myproject::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool myproject::ap_const_boolean_1 = true;
const bool myproject::ap_const_boolean_0 = false;
const sc_lv<256> myproject::ap_const_lv256_lc_1 = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<16> myproject::ap_const_lv16_10 = "10000";
const sc_lv<16> myproject::ap_const_lv16_4 = "100";

myproject::myproject(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_96 = new dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0("grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_96");
    grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_96->ap_clk(ap_clk);
    grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_96->ap_rst(ap_rst);
    grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_96->data_V_read(dense_1_input_V_in_sig);
    grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_96->ap_return_0(grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_96_ap_return_0);
    grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_96->ap_return_1(grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_96_ap_return_1);
    grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_96->ap_return_2(grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_96_ap_return_2);
    grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_96->ap_return_3(grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_96_ap_return_3);
    grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_96->ap_ce(grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_96_ap_ce);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( ap_start );
    sensitive << ( dense_1_input_V_ap_vld_in_sig );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( ap_start );
    sensitive << ( dense_1_input_V_ap_vld_in_sig );

    SC_METHOD(thread_ap_block_pp0_stage0_11001_ignoreCallOp6);
    sensitive << ( ap_start );
    sensitive << ( dense_1_input_V_ap_vld_in_sig );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( ap_start );
    sensitive << ( dense_1_input_V_ap_vld_in_sig );

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);
    sensitive << ( ap_start );
    sensitive << ( dense_1_input_V_ap_vld_in_sig );

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0_ignore_call14);
    sensitive << ( ap_start );
    sensitive << ( dense_1_input_V_ap_vld_in_sig );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter1_ignore_call14);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter2);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter2_ignore_call14);

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter3);

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter3_ignore_call14);

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_reg_pp0_iter0);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter3 );

    SC_METHOD(thread_ap_idle_pp0_0to2);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_reset_idle_pp0);
    sensitive << ( ap_start );
    sensitive << ( ap_idle_pp0_0to2 );

    SC_METHOD(thread_const_size_in_1);
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_const_size_in_1_ap_vld);
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_const_size_out_1);
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_const_size_out_1_ap_vld);
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_dense_1_input_V_ap_vld_in_sig);
    sensitive << ( dense_1_input_V_ap_vld );
    sensitive << ( dense_1_input_V_ap_vld_preg );

    SC_METHOD(thread_dense_1_input_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( dense_1_input_V_ap_vld );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_dense_1_input_V_in_sig);
    sensitive << ( dense_1_input_V_ap_vld );
    sensitive << ( dense_1_input_V );
    sensitive << ( dense_1_input_V_preg );

    SC_METHOD(thread_grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_96_ap_ce);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001_ignoreCallOp6 );

    SC_METHOD(thread_layer2_out_0_V);
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_96_ap_return_0 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_layer2_out_0_V_ap_vld);
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_layer2_out_1_V);
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_96_ap_return_1 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_layer2_out_1_V_ap_vld);
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_layer2_out_2_V);
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_96_ap_return_2 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_layer2_out_2_V_ap_vld);
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_layer2_out_3_V);
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_96_ap_return_3 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_layer2_out_3_V_ap_vld);
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_reset_idle_pp0 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "1";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter3 = SC_LOGIC_0;
    dense_1_input_V_preg = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    dense_1_input_V_ap_vld_preg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "myproject_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, dense_1_input_V_ap_vld, "(port)dense_1_input_V_ap_vld");
    sc_trace(mVcdFile, dense_1_input_V, "(port)dense_1_input_V");
    sc_trace(mVcdFile, layer2_out_0_V, "(port)layer2_out_0_V");
    sc_trace(mVcdFile, layer2_out_0_V_ap_vld, "(port)layer2_out_0_V_ap_vld");
    sc_trace(mVcdFile, layer2_out_1_V, "(port)layer2_out_1_V");
    sc_trace(mVcdFile, layer2_out_1_V_ap_vld, "(port)layer2_out_1_V_ap_vld");
    sc_trace(mVcdFile, layer2_out_2_V, "(port)layer2_out_2_V");
    sc_trace(mVcdFile, layer2_out_2_V_ap_vld, "(port)layer2_out_2_V_ap_vld");
    sc_trace(mVcdFile, layer2_out_3_V, "(port)layer2_out_3_V");
    sc_trace(mVcdFile, layer2_out_3_V_ap_vld, "(port)layer2_out_3_V_ap_vld");
    sc_trace(mVcdFile, const_size_in_1, "(port)const_size_in_1");
    sc_trace(mVcdFile, const_size_in_1_ap_vld, "(port)const_size_in_1_ap_vld");
    sc_trace(mVcdFile, const_size_out_1, "(port)const_size_out_1");
    sc_trace(mVcdFile, const_size_out_1_ap_vld, "(port)const_size_out_1_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter3, "ap_enable_reg_pp0_iter3");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, dense_1_input_V_ap_vld_in_sig, "dense_1_input_V_ap_vld_in_sig");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter1, "ap_block_state2_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter2, "ap_block_state3_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter3, "ap_block_state4_pp0_stage0_iter3");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, dense_1_input_V_preg, "dense_1_input_V_preg");
    sc_trace(mVcdFile, dense_1_input_V_in_sig, "dense_1_input_V_in_sig");
    sc_trace(mVcdFile, dense_1_input_V_ap_vld_preg, "dense_1_input_V_ap_vld_preg");
    sc_trace(mVcdFile, dense_1_input_V_blk_n, "dense_1_input_V_blk_n");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_96_ap_return_0, "grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_96_ap_return_0");
    sc_trace(mVcdFile, grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_96_ap_return_1, "grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_96_ap_return_1");
    sc_trace(mVcdFile, grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_96_ap_return_2, "grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_96_ap_return_2");
    sc_trace(mVcdFile, grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_96_ap_return_3, "grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_96_ap_return_3");
    sc_trace(mVcdFile, grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_96_ap_ce, "grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_96_ap_ce");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0_ignore_call14, "ap_block_state1_pp0_stage0_iter0_ignore_call14");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter1_ignore_call14, "ap_block_state2_pp0_stage0_iter1_ignore_call14");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter2_ignore_call14, "ap_block_state3_pp0_stage0_iter2_ignore_call14");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter3_ignore_call14, "ap_block_state4_pp0_stage0_iter3_ignore_call14");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001_ignoreCallOp6, "ap_block_pp0_stage0_11001_ignoreCallOp6");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0_0to2, "ap_idle_pp0_0to2");
    sc_trace(mVcdFile, ap_reset_idle_pp0, "ap_reset_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
    mHdltvinHandle.open("myproject.hdltvin.dat");
    mHdltvoutHandle.open("myproject.hdltvout.dat");
}

myproject::~myproject() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_96;
}

void myproject::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_pp0_stage0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0))) {
            ap_enable_reg_pp0_iter1 = ap_start.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter3 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter3 = ap_enable_reg_pp0_iter2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        dense_1_input_V_ap_vld_preg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
            dense_1_input_V_ap_vld_preg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, dense_1_input_V_ap_vld.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read())))) {
            dense_1_input_V_ap_vld_preg = dense_1_input_V_ap_vld.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        dense_1_input_V_preg = ap_const_lv256_lc_1;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, dense_1_input_V_ap_vld.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read())))) {
            dense_1_input_V_preg = dense_1_input_V.read();
        }
    }
}

void myproject::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[0];
}

void myproject::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void myproject::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || 
  esl_seteq<1,1,1>(ap_const_logic_0, dense_1_input_V_ap_vld_in_sig.read())));
}

void myproject::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || 
  esl_seteq<1,1,1>(ap_const_logic_0, dense_1_input_V_ap_vld_in_sig.read())));
}

void myproject::thread_ap_block_pp0_stage0_11001_ignoreCallOp6() {
    ap_block_pp0_stage0_11001_ignoreCallOp6 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || 
  esl_seteq<1,1,1>(ap_const_logic_0, dense_1_input_V_ap_vld_in_sig.read())));
}

void myproject::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || 
  esl_seteq<1,1,1>(ap_const_logic_0, dense_1_input_V_ap_vld_in_sig.read())));
}

void myproject::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dense_1_input_V_ap_vld_in_sig.read()));
}

void myproject::thread_ap_block_state1_pp0_stage0_iter0_ignore_call14() {
    ap_block_state1_pp0_stage0_iter0_ignore_call14 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dense_1_input_V_ap_vld_in_sig.read()));
}

void myproject::thread_ap_block_state2_pp0_stage0_iter1() {
    ap_block_state2_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void myproject::thread_ap_block_state2_pp0_stage0_iter1_ignore_call14() {
    ap_block_state2_pp0_stage0_iter1_ignore_call14 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void myproject::thread_ap_block_state3_pp0_stage0_iter2() {
    ap_block_state3_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void myproject::thread_ap_block_state3_pp0_stage0_iter2_ignore_call14() {
    ap_block_state3_pp0_stage0_iter2_ignore_call14 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void myproject::thread_ap_block_state4_pp0_stage0_iter3() {
    ap_block_state4_pp0_stage0_iter3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void myproject::thread_ap_block_state4_pp0_stage0_iter3_ignore_call14() {
    ap_block_state4_pp0_stage0_iter3_ignore_call14 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void myproject::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void myproject::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void myproject::thread_ap_enable_reg_pp0_iter0() {
    ap_enable_reg_pp0_iter0 = ap_start.read();
}

void myproject::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void myproject::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter3.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void myproject::thread_ap_idle_pp0_0to2() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()))) {
        ap_idle_pp0_0to2 = ap_const_logic_1;
    } else {
        ap_idle_pp0_0to2 = ap_const_logic_0;
    }
}

void myproject::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void myproject::thread_ap_reset_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0_0to2.read()))) {
        ap_reset_idle_pp0 = ap_const_logic_1;
    } else {
        ap_reset_idle_pp0 = ap_const_logic_0;
    }
}

void myproject::thread_const_size_in_1() {
    const_size_in_1 = ap_const_lv16_10;
}

void myproject::thread_const_size_in_1_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()))) {
        const_size_in_1_ap_vld = ap_const_logic_1;
    } else {
        const_size_in_1_ap_vld = ap_const_logic_0;
    }
}

void myproject::thread_const_size_out_1() {
    const_size_out_1 = ap_const_lv16_4;
}

void myproject::thread_const_size_out_1_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()))) {
        const_size_out_1_ap_vld = ap_const_logic_1;
    } else {
        const_size_out_1_ap_vld = ap_const_logic_0;
    }
}

void myproject::thread_dense_1_input_V_ap_vld_in_sig() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, dense_1_input_V_ap_vld.read())) {
        dense_1_input_V_ap_vld_in_sig = dense_1_input_V_ap_vld.read();
    } else {
        dense_1_input_V_ap_vld_in_sig = dense_1_input_V_ap_vld_preg.read();
    }
}

void myproject::thread_dense_1_input_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        dense_1_input_V_blk_n = dense_1_input_V_ap_vld.read();
    } else {
        dense_1_input_V_blk_n = ap_const_logic_1;
    }
}

void myproject::thread_dense_1_input_V_in_sig() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, dense_1_input_V_ap_vld.read())) {
        dense_1_input_V_in_sig = dense_1_input_V.read();
    } else {
        dense_1_input_V_in_sig = dense_1_input_V_preg.read();
    }
}

void myproject::thread_grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_96_ap_ce() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001_ignoreCallOp6.read(), ap_const_boolean_0))) {
        grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_96_ap_ce = ap_const_logic_1;
    } else {
        grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_96_ap_ce = ap_const_logic_0;
    }
}

void myproject::thread_layer2_out_0_V() {
    layer2_out_0_V = grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_96_ap_return_0.read();
}

void myproject::thread_layer2_out_0_V_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()))) {
        layer2_out_0_V_ap_vld = ap_const_logic_1;
    } else {
        layer2_out_0_V_ap_vld = ap_const_logic_0;
    }
}

void myproject::thread_layer2_out_1_V() {
    layer2_out_1_V = grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_96_ap_return_1.read();
}

void myproject::thread_layer2_out_1_V_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()))) {
        layer2_out_1_V_ap_vld = ap_const_logic_1;
    } else {
        layer2_out_1_V_ap_vld = ap_const_logic_0;
    }
}

void myproject::thread_layer2_out_2_V() {
    layer2_out_2_V = grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_96_ap_return_2.read();
}

void myproject::thread_layer2_out_2_V_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()))) {
        layer2_out_2_V_ap_vld = ap_const_logic_1;
    } else {
        layer2_out_2_V_ap_vld = ap_const_logic_0;
    }
}

void myproject::thread_layer2_out_3_V() {
    layer2_out_3_V = grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_96_ap_return_3.read();
}

void myproject::thread_layer2_out_3_V_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()))) {
        layer2_out_3_V_ap_vld = ap_const_logic_1;
    } else {
        layer2_out_3_V_ap_vld = ap_const_logic_0;
    }
}

void myproject::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}

void myproject::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"dense_1_input_V_ap_vld\" :  \"" << dense_1_input_V_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"dense_1_input_V\" :  \"" << dense_1_input_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"layer2_out_0_V\" :  \"" << layer2_out_0_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"layer2_out_0_V_ap_vld\" :  \"" << layer2_out_0_V_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"layer2_out_1_V\" :  \"" << layer2_out_1_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"layer2_out_1_V_ap_vld\" :  \"" << layer2_out_1_V_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"layer2_out_2_V\" :  \"" << layer2_out_2_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"layer2_out_2_V_ap_vld\" :  \"" << layer2_out_2_V_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"layer2_out_3_V\" :  \"" << layer2_out_3_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"layer2_out_3_V_ap_vld\" :  \"" << layer2_out_3_V_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"const_size_in_1\" :  \"" << const_size_in_1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"const_size_in_1_ap_vld\" :  \"" << const_size_in_1_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"const_size_out_1\" :  \"" << const_size_out_1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"const_size_out_1_ap_vld\" :  \"" << const_size_out_1_ap_vld.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

