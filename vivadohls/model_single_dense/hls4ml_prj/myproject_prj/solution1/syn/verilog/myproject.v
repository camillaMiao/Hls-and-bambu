// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="myproject,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7vx690t-ffg1930-3,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=3.830000,HLS_SYN_LAT=3,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=55,HLS_SYN_FF=1866,HLS_SYN_LUT=1773,HLS_VERSION=2019_2}" *)

module myproject (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        dense_1_input_V_ap_vld,
        dense_1_input_V,
        layer2_out_0_V,
        layer2_out_0_V_ap_vld,
        layer2_out_1_V,
        layer2_out_1_V_ap_vld,
        layer2_out_2_V,
        layer2_out_2_V_ap_vld,
        layer2_out_3_V,
        layer2_out_3_V_ap_vld,
        const_size_in_1,
        const_size_in_1_ap_vld,
        const_size_out_1,
        const_size_out_1_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   dense_1_input_V_ap_vld;
input  [255:0] dense_1_input_V;
output  [15:0] layer2_out_0_V;
output   layer2_out_0_V_ap_vld;
output  [15:0] layer2_out_1_V;
output   layer2_out_1_V_ap_vld;
output  [15:0] layer2_out_2_V;
output   layer2_out_2_V_ap_vld;
output  [15:0] layer2_out_3_V;
output   layer2_out_3_V_ap_vld;
output  [15:0] const_size_in_1;
output   const_size_in_1_ap_vld;
output  [15:0] const_size_out_1;
output   const_size_out_1_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg layer2_out_0_V_ap_vld;
reg layer2_out_1_V_ap_vld;
reg layer2_out_2_V_ap_vld;
reg layer2_out_3_V_ap_vld;
reg const_size_in_1_ap_vld;
reg const_size_out_1_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
reg    dense_1_input_V_ap_vld_in_sig;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
reg   [255:0] dense_1_input_V_preg;
reg   [255:0] dense_1_input_V_in_sig;
reg    dense_1_input_V_ap_vld_preg;
reg    dense_1_input_V_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_subdone;
wire   [15:0] grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_96_ap_return_0;
wire   [15:0] grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_96_ap_return_1;
wire   [15:0] grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_96_ap_return_2;
wire   [15:0] grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_96_ap_return_3;
reg    grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_96_ap_ce;
reg    ap_block_state1_pp0_stage0_iter0_ignore_call14;
wire    ap_block_state2_pp0_stage0_iter1_ignore_call14;
wire    ap_block_state3_pp0_stage0_iter2_ignore_call14;
wire    ap_block_state4_pp0_stage0_iter3_ignore_call14;
reg    ap_block_pp0_stage0_11001_ignoreCallOp6;
reg    ap_block_pp0_stage0_01001;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to2;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 dense_1_input_V_preg = 256'd0;
#0 dense_1_input_V_ap_vld_preg = 1'b0;
end

dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0 grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_96(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_V_read(dense_1_input_V_in_sig),
    .ap_return_0(grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_96_ap_return_0),
    .ap_return_1(grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_96_ap_return_1),
    .ap_return_2(grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_96_ap_return_2),
    .ap_return_3(grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_96_ap_return_3),
    .ap_ce(grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_96_ap_ce)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        dense_1_input_V_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            dense_1_input_V_ap_vld_preg <= 1'b0;
        end else if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (dense_1_input_V_ap_vld == 1'b1))) begin
            dense_1_input_V_ap_vld_preg <= dense_1_input_V_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        dense_1_input_V_preg <= 256'd0;
    end else begin
        if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (dense_1_input_V_ap_vld == 1'b1))) begin
            dense_1_input_V_preg <= dense_1_input_V;
        end
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to2 = 1'b1;
    end else begin
        ap_idle_pp0_0to2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to2 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        const_size_in_1_ap_vld = 1'b1;
    end else begin
        const_size_in_1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        const_size_out_1_ap_vld = 1'b1;
    end else begin
        const_size_out_1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((dense_1_input_V_ap_vld == 1'b1)) begin
        dense_1_input_V_ap_vld_in_sig = dense_1_input_V_ap_vld;
    end else begin
        dense_1_input_V_ap_vld_in_sig = dense_1_input_V_ap_vld_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dense_1_input_V_blk_n = dense_1_input_V_ap_vld;
    end else begin
        dense_1_input_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((dense_1_input_V_ap_vld == 1'b1)) begin
        dense_1_input_V_in_sig = dense_1_input_V;
    end else begin
        dense_1_input_V_in_sig = dense_1_input_V_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001_ignoreCallOp6))) begin
        grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_96_ap_ce = 1'b1;
    end else begin
        grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_96_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        layer2_out_0_V_ap_vld = 1'b1;
    end else begin
        layer2_out_0_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        layer2_out_1_V_ap_vld = 1'b1;
    end else begin
        layer2_out_1_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        layer2_out_2_V_ap_vld = 1'b1;
    end else begin
        layer2_out_2_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        layer2_out_3_V_ap_vld = 1'b1;
    end else begin
        layer2_out_3_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_start == 1'b1) & ((ap_start == 1'b0) | (dense_1_input_V_ap_vld_in_sig == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_start == 1'b1) & ((ap_start == 1'b0) | (dense_1_input_V_ap_vld_in_sig == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001_ignoreCallOp6 = ((ap_start == 1'b1) & ((ap_start == 1'b0) | (dense_1_input_V_ap_vld_in_sig == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_start == 1'b1) & ((ap_start == 1'b0) | (dense_1_input_V_ap_vld_in_sig == 1'b0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start == 1'b0) | (dense_1_input_V_ap_vld_in_sig == 1'b0));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0_ignore_call14 = ((ap_start == 1'b0) | (dense_1_input_V_ap_vld_in_sig == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1_ignore_call14 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2_ignore_call14 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3_ignore_call14 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign const_size_in_1 = 16'd16;

assign const_size_out_1 = 16'd4;

assign layer2_out_0_V = grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_96_ap_return_0;

assign layer2_out_1_V = grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_96_ap_return_1;

assign layer2_out_2_V = grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_96_ap_return_2;

assign layer2_out_3_V = grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_0_0_fu_96_ap_return_3;

endmodule //myproject
